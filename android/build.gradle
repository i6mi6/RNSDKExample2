// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "34.0.0"
        minSdkVersion = 21
        compileSdkVersion = 34
        targetSdkVersion = 34
        ndkVersion = "25.1.8937393"
        kotlinVersion = "1.7.22"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle")
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    }
}

allprojects {
    buildDir = "$rootDir/build/libs/${project.name}"
    tasks.withType(Javadoc).configureEach { enabled = false }

    repositories {
        maven {
            url("${project(':react-native-background-fetch').projectDir}/libs")
        }

        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }

        google()
        maven { url 'https://jitpack.io' }

        // Add hermes
        flatDir {
            dirs "$rootDir/../node_modules/hermes-engine/android"
        }
    }
}

// Move the getDeps task outside the subprojects block
tasks.register('getDeps') {
    doFirst {
        def dependencies = []
        subprojects.each { project ->
            if (project.name != "storelink") {
                def arr = project.configurations.getByName("implementation").allDependencies
                arr.each { dep ->
                    if (dep.group != null && dep.group != "storelink" && dep.name != "react-native") {
                        dependencies += "${dep.group}:${dep.name}:${dep.version}"
                    }
                }
            }
        }
        def str = ""
        dependencies.each {
            str += it + "\n"
        }
        new File("${rootDir}/SDKOutput", "libs.txt").text = str
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion = 34
                buildToolsVersion = "33.0.0"
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                lintOptions {
                    abortOnError false
                }
            }
        }
    }
}

// Get all dependencies
def dependencies = []

tasks.register('createGradleFile') {
    doFirst {
        def str = ""
        dependencies.each {
            str += it + "\n"
        }
        new File("${rootDir}/SDKOutput", "libs.txt").text = str
    }
    finalizedBy 'getDeps'
}